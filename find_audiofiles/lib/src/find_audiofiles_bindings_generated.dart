// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/find_audiofiles.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FindAudiofilesBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FindAudiofilesBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FindAudiofilesBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int faf_first_wrapper(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<faf_context>> context,
    ffi.Pointer<ffi.Pointer<faf_filesystem_entry>> entry,
  ) {
    return _faf_first_wrapper(
      path,
      context,
      entry,
    );
  }

  late final _faf_first_wrapperPtr = _lookup<
          ffi.NativeFunction<
              ffi.IntPtr Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<faf_context>>,
                  ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>>(
      'faf_first_wrapper');
  late final _faf_first_wrapper = _faf_first_wrapperPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<faf_context>>,
          ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>();

  int faf_next_wrapper(
    ffi.Pointer<faf_context> context,
    ffi.Pointer<ffi.Pointer<faf_filesystem_entry>> entry,
  ) {
    return _faf_next_wrapper(
      context,
      entry,
    );
  }

  late final _faf_next_wrapperPtr = _lookup<
          ffi.NativeFunction<
              ffi.IntPtr Function(ffi.Pointer<faf_context>,
                  ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>>(
      'faf_next_wrapper');
  late final _faf_next_wrapper = _faf_next_wrapperPtr.asFunction<
      int Function(ffi.Pointer<faf_context>,
          ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>();

  void faf_close_wrapper(
    ffi.Pointer<faf_context> context,
  ) {
    return _faf_close_wrapper(
      context,
    );
  }

  late final _faf_close_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<faf_context>)>>(
          'faf_close_wrapper');
  late final _faf_close_wrapper = _faf_close_wrapperPtr
      .asFunction<void Function(ffi.Pointer<faf_context>)>();
}

class faf_context extends ffi.Opaque {}

class faf_filesystem_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;
}
