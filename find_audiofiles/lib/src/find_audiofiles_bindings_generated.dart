// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/find_audiofiles.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FindAudiofilesBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FindAudiofilesBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FindAudiofilesBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int faf_first_wrapper(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<faf_context>> context,
    ffi.Pointer<ffi.Pointer<faf_filesystem_entry>> entry,
  ) {
    return _faf_first_wrapper(
      path,
      context,
      entry,
    );
  }

  late final _faf_first_wrapperPtr = _lookup<
          ffi.NativeFunction<
              ffi.IntPtr Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<faf_context>>,
                  ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>>(
      'faf_first_wrapper');
  late final _faf_first_wrapper = _faf_first_wrapperPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<faf_context>>,
          ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>();

  int faf_next_wrapper(
    ffi.Pointer<faf_context> context,
    ffi.Pointer<ffi.Pointer<faf_filesystem_entry>> entry,
  ) {
    return _faf_next_wrapper(
      context,
      entry,
    );
  }

  late final _faf_next_wrapperPtr = _lookup<
          ffi.NativeFunction<
              ffi.IntPtr Function(ffi.Pointer<faf_context>,
                  ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>>(
      'faf_next_wrapper');
  late final _faf_next_wrapper = _faf_next_wrapperPtr.asFunction<
      int Function(ffi.Pointer<faf_context>,
          ffi.Pointer<ffi.Pointer<faf_filesystem_entry>>)>();

  void faf_close_wrapper(
    ffi.Pointer<faf_context> context,
  ) {
    return _faf_close_wrapper(
      context,
    );
  }

  late final _faf_close_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<faf_context>)>>(
          'faf_close_wrapper');
  late final _faf_close_wrapper = _faf_close_wrapperPtr
      .asFunction<void Function(ffi.Pointer<faf_context>)>();

  ffi.Pointer<audiofile_scanner> make_audiofile_scanner(
    ffi.Pointer<ffi.Char> directory,
    ffi.Pointer<ffi.Int> error_code,
  ) {
    return _make_audiofile_scanner(
      directory,
      error_code,
    );
  }

  late final _make_audiofile_scannerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<audiofile_scanner> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('make_audiofile_scanner');
  late final _make_audiofile_scanner = _make_audiofile_scannerPtr.asFunction<
      ffi.Pointer<audiofile_scanner> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int audiofile_scanner_scan(
    ffi.Pointer<audiofile_scanner> scanner,
    audiofile_scanner_callback callback,
  ) {
    return _audiofile_scanner_scan(
      scanner,
      callback,
    );
  }

  late final _audiofile_scanner_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<audiofile_scanner>,
              audiofile_scanner_callback)>>('audiofile_scanner_scan');
  late final _audiofile_scanner_scan = _audiofile_scanner_scanPtr.asFunction<
      int Function(
          ffi.Pointer<audiofile_scanner>, audiofile_scanner_callback)>();

  int audiofile_scanner_cancel_scan(
    ffi.Pointer<audiofile_scanner> scanner,
  ) {
    return _audiofile_scanner_cancel_scan(
      scanner,
    );
  }

  late final _audiofile_scanner_cancel_scanPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<audiofile_scanner>)>>(
      'audiofile_scanner_cancel_scan');
  late final _audiofile_scanner_cancel_scan = _audiofile_scanner_cancel_scanPtr
      .asFunction<int Function(ffi.Pointer<audiofile_scanner>)>();

  void audiofile_scanner_close(
    ffi.Pointer<audiofile_scanner> scanner,
  ) {
    return _audiofile_scanner_close(
      scanner,
    );
  }

  late final audiofile_scanner_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<audiofile_scanner>)>>('audiofile_scanner_close');
  late final _audiofile_scanner_close = audiofile_scanner_closePtr
      .asFunction<void Function(ffi.Pointer<audiofile_scanner>)>();
}

class faf_context extends ffi.Opaque {}

class faf_filesystem_entry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;
}

class audiofile_scanner extends ffi.Opaque {}

typedef audiofile_scanner_callback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<faf_filesystem_entry>)>>;
